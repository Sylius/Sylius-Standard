name: Build

on:
    push:
        branches-ignore:
            - "dependabot/**"
        paths-ignore:
            - "*.md"
    pull_request:
        paths-ignore:
            - "*.md"
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday
    workflow_dispatch: ~

jobs:
    tests:
        runs-on: ubuntu-20.04

        name: "PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }}, Node ${{ matrix.node }}"

        timeout-minutes: 50

        strategy:
            fail-fast: false
            matrix:
                php: ["8.2"]
                symfony: ["^6.4"]
                node: ["20.x"]
                mysql: ["8.3"]

        env:
            APP_ENV: test_cached
            DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=${{ matrix.mysql }}"

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    extensions: intl, mbstring
                    tools: symfony
                    coverage: none

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: |
                    composer global config --no-plugins allow-plugins.symfony/flex true
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^2.4"
                    composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Setup Node
                uses: actions/setup-node@v2
                with:
                    node-version: "${{ matrix.node }}"

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Output PHP version for Symfony CLI
                run: php -v | head -n 1 | awk '{ print $2 }' > .php-version

            -
                name: Install certificates
                run: symfony server:ca:install

            -
                name: Run Chrome Headless
                run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' http://127.0.0.1 > /dev/null 2>&1 &

            -
                name: Run webserver
                run: symfony server:start --port=8080 --dir=public --daemon

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-composer-

            -
                name: Install PHP dependencies
                run: composer install --no-interaction

            -
                name: Get Yarn cache directory
                id: yarn-cache
                run: echo "::set-output name=dir::$(yarn cache dir)"

            -
                name: Cache Yarn
                uses: actions/cache@v2
                with:
                    path: ${{ steps.yarn-cache.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-${{ matrix.node }}-yarn-

            -
                name: Install JS dependencies
                run: yarn install

            -
                name: Prepare test application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Prepare test application assets
                run: |
                    bin/console assets:install public -vvv
                    yarn encore production

            -
                name: Prepare test application cache
                run: bin/console cache:warmup -vvv

            -
                name: Prepare Messenger transport (Doctrine)
                run: bin/console messenger:setup-transports -vvv

            -
                name: Load fixtures
                run: bin/console sylius:fixtures:load -n

            -
                name: Validate composer.json
                run: composer validate --ansi --strict --no-check-all
#                Restore before Sylius 2.0 release
#                run: composer validate --ansi --strict --no-check-publish

            -
                name: Run security check
                run: symfony security:check

            -
                name: Check coding standard
                run: vendor/bin/ecs check src

            -
                name: Run PHPStan
                run: vendor/bin/phpstan analyse -c phpstan.neon -l max src/

            -
                name: Validate database schema
                run: bin/console doctrine:schema:validate

            -
                name: Run PHPSpec
                run: vendor/bin/phpspec run --ansi -f progress --no-interaction

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit --colors=always

            -   name: Install Behat driver
                run: vendor/bin/bdi detect drivers

            -
                name: Run managing catalog promotion scenarios
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@todo&&~@cli&&@managing_catalog_promotions"

            -
                name: Run managing exchange rates scenarios
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@todo&&~@cli&&@managing_exchange_rates"

            -
                name: Run non-JS Behat (without managing catalog promotion scenarios and exchange rates)
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@todo&&~@cli&&~@managing_catalog_promotions&&~@managing_exchange_rates"

            -
                name: Run JS Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --rerun || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }})"
                    path: etc/build/
                    if-no-files-found: ignore
